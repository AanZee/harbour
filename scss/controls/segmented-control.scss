$segmented-control-z-index: 0 !default;
$segmented-control-wrapping-gutter: $spacing !default;
$segmented-control-border-width: 2px !default;
$segmented-control-border-width-states: 3px !default;
$segmented-control-border-radius: $border-radius-100 !default;
$segmented-control-item-selected-color: $color-text !default;
$segmented-control-item-selected-border-color: $color-select !default;
$segmented-control-item-selected-background-color: $color-select-10 !default;

.segmented-control {
	display: flex;
	user-select: none;
}

.segmented-control--80 {
}

.segmented-control--90 {
}

.segmented-control--column {
	flex-direction: column;
}

.segmented-control--column-hand-and-smaller {
	@include media(0, $range-hand) {
		flex-direction: column;
	}
}

.segmented-control--wrapping {
	margin: $segmented-control-wrapping-gutter * -0.5;
	flex-wrap: wrap;
}

.segmented-control--stretched {
	width: 100%;
}

.segmented-control--equal-widths {
}

.segmented-control__item {
	position: relative; // NOTE: To contain absolute positioned hidden input.
	display: flex;
	min-width: $spacing * 5.5; // NOTE: For making sure min-width is not auto when parent is flex. When min-width is auto, long words won't break in a flex.
	text-align: center;
	align-items: stretch;

	.segmented-control--column & {
		flex-basis: auto; // NOTE With flex direction column the flex-basis is the height of an item what we don't want to change.
	}

	.segmented-control--column-hand-and-smaller & {
		@include media(0, $range-hand) {
			flex-basis: auto; // NOTE With flex direction column the flex-basis is the height of an item what we don't want to change.
		}
	}

	.segmented-control--wrapping & {
		margin: $segmented-control-wrapping-gutter * 0.5;
		flex-basis: auto;
		flex-shrink: 1;
		flex-grow: 0;
		text-align: left;
	}

	.segmented-control--stretched & {
		flex-grow: 1;
	}

	.segmented-control--stretched.segmented-control--wrapping & {
		text-align: center;
	}

	.segmented-control--equal-widths & {
		@include media($range-lap, false) {
			flex-basis: $spacing * 5.5;
			flex-grow: 1;
		}
	}
}

.segmented-control__item-input {
	position: absolute;
	z-index: -100;
	opacity: 0;
}

.segmented-control__item-label {
	position: relative;
	display: flex;
	align-items: center;
	justify-content: center;
	padding-top: (($control-size-100 - ($font-size-200 * $line-height-20)) / 2 - $segmented-control-border-width);
	padding-right: $spacing * 2;
	padding-bottom: (($control-size-100 - ($font-size-200 * $line-height-20)) / 2 - $segmented-control-border-width);
	padding-left: $spacing * 2;
	width: 100%;
	border-style: solid;
	border-color: $color-ui;
	border-top-width: $segmented-control-border-width;
	border-right-width: $segmented-control-border-width / 2;
	border-bottom-width: $segmented-control-border-width;
	border-left-width: $segmented-control-border-width / 2;
	background-color: $color-background;
	color: $color-text;
	font-size: $font-size-200;
	line-height: $line-height-20;

	.segmented-control__item:first-child & {
		border-left-width: $segmented-control-border-width;
		border-top-left-radius: $segmented-control-border-radius;
		border-top-right-radius: 0;
		border-bottom-right-radius: 0;
		border-bottom-left-radius: $segmented-control-border-radius;
	}

	.segmented-control__item:last-child & {
		border-right-width: $segmented-control-border-width;
		border-top-left-radius: 0;
		border-top-right-radius: $segmented-control-border-radius;
		border-bottom-right-radius: $segmented-control-border-radius;
		border-bottom-left-radius: 0;
	}

	.segmented-control--80 & {
		padding-top: (($control-size-80 - ($font-size-90 * $line-height-20)) / 2 - $segmented-control-border-width);
		padding-right: $spacing * 1;
		padding-bottom: (($control-size-80 - ($font-size-90 * $line-height-20)) / 2 - $segmented-control-border-width);
		padding-left: $spacing * 1;
		font-size: $font-size-90;
	}

	.segmented-control--90 & {
		padding-right: $spacing * 1.5;
		padding-left: $spacing * 1.5;

		@include media(0, $range-palm) {
			padding-top: (($control-size-90 - ($font-size-90 * $line-height-20)) / 2 - $segmented-control-border-width);
			padding-bottom: (($control-size-90 - ($font-size-90 * $line-height-20)) / 2 - $segmented-control-border-width);
			font-size: $font-size-90;
		}
		@include media($range-hand, false) {
			padding-top: (($control-size-90 - ($font-size-100 * $line-height-20)) / 2 - $segmented-control-border-width);
			padding-bottom: (($control-size-90 - ($font-size-100 * $line-height-20)) / 2 - $segmented-control-border-width);
			font-size: $font-size-100;
		}
	}

	.segmented-control--column & {
		border-top-width: $segmented-control-border-width / 2;
		border-right-width: $segmented-control-border-width;
		border-bottom-width: $segmented-control-border-width / 2;
		border-left-width: $segmented-control-border-width;
	}

	.segmented-control--column .segmented-control__item:first-child & {
		border-top-width: $segmented-control-border-width;
		border-top-left-radius: $segmented-control-border-radius;
		border-top-right-radius: $segmented-control-border-radius;
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0;
	}

	.segmented-control--column .segmented-control__item:last-child & {
		border-bottom-width: $segmented-control-border-width;
		border-top-left-radius: 0;
		border-top-right-radius: 0;
		border-bottom-right-radius: $segmented-control-border-radius;
		border-bottom-left-radius: $segmented-control-border-radius;
	}

	.segmented-control--column-hand-and-smaller & {
		@include media(0, $range-hand) {
			border-top-width: $segmented-control-border-width / 2;
			border-right-width: $segmented-control-border-width;
			border-bottom-width: $segmented-control-border-width / 2;
			border-left-width: $segmented-control-border-width;
		}
	}

	.segmented-control--column-hand-and-smaller .segmented-control__item:first-child & {
		@include media(0, $range-hand) {
			border-top-width: $segmented-control-border-width;
			border-top-left-radius: $segmented-control-border-radius;
			border-top-right-radius: $segmented-control-border-radius;
			border-bottom-right-radius: 0;
			border-bottom-left-radius: 0;
		}
	}

	.segmented-control--column-hand-and-smaller .segmented-control__item:last-child & {
		@include media(0, $range-hand) {
			border-bottom-width: $segmented-control-border-width;
			border-top-left-radius: 0;
			border-top-right-radius: 0;
			border-bottom-right-radius: $segmented-control-border-radius;
			border-bottom-left-radius: $segmented-control-border-radius;
		}
	}

	.segmented-control--wrapping &,
	.segmented-control--wrapping .segmented-control__item:first-child &,
	.segmented-control--wrapping .segmented-control__item:last-child & {
		border-width: $segmented-control-border-width;
		border-radius: $segmented-control-border-radius;
	}

	.segmented-control__item-input:checked ~ & {
		z-index: $segmented-control-z-index + 1;
		border-color: $segmented-control-item-selected-border-color;
		box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $segmented-control-item-selected-border-color;
		background-color: $segmented-control-item-selected-background-color;
		color: $segmented-control-item-selected-color;

		.segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
		}

		.segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $segmented-control-item-selected-border-color;
		}

		.segmented-control--column & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
		}

		.segmented-control--column .segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
		}

		.segmented-control--column .segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
		}

		.segmented-control--column-hand-and-smaller & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:first-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:last-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $segmented-control-item-selected-border-color, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $segmented-control-item-selected-border-color, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $segmented-control-item-selected-border-color, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $segmented-control-item-selected-border-color;
			}
		}

		.segmented-control--wrapping &,
		.segmented-control--wrapping .segmented-control__item:first-child &,
		.segmented-control--wrapping .segmented-control__item:last-child & {
			box-shadow: inset 0 0 0 ($segmented-control-border-width-states - $segmented-control-border-width) $segmented-control-item-selected-border-color;
		}
	}

	.segmented-control__item-input:focus ~ & {
		z-index: $segmented-control-z-index + 1;
		border-color: $color-focus;
		box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-focus, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $color-focus;

		.segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-focus, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
		}

		.segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $color-focus;
		}

		.segmented-control--column & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
		}

		.segmented-control--column .segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
		}

		.segmented-control--column .segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
		}

		.segmented-control--column-hand-and-smaller & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:first-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:last-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-focus, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-focus, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-focus, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-focus;
			}
		}

		.segmented-control--wrapping &,
		.segmented-control--wrapping .segmented-control__item:first-child &,
		.segmented-control--wrapping .segmented-control__item:last-child & {
			box-shadow: inset 0 0 0 ($segmented-control-border-width-states - $segmented-control-border-width) $color-focus;
		}
	}

	.segmented-control__item-input:focus:checked ~ & {
		border-color: $color-select-500;
		box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-select-500, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $color-select-500;

		.segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-select-500, inset (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
		}

		.segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 0 $color-select-500;
		}

		.segmented-control--column & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
		}

		.segmented-control--column .segmented-control__item:first-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
		}

		.segmented-control--column .segmented-control__item:last-child & {
			box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
		}

		.segmented-control--column-hand-and-smaller & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:first-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - ($segmented-control-border-width / 2)) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
			}
		}

		.segmented-control--column-hand-and-smaller .segmented-control__item:last-child & {
			@include media(0, $range-hand) {
				box-shadow: inset 0 ($segmented-control-border-width-states - ($segmented-control-border-width / 2)) 0 0 $color-select-500, inset (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 0 $color-select-500, inset 0 (($segmented-control-border-width-states - $segmented-control-border-width) * -1) 0 0 $color-select-500, inset ($segmented-control-border-width-states - $segmented-control-border-width) 0 0 0 $color-select-500;
			}
		}

		.segmented-control--wrapping &,
		.segmented-control--wrapping .segmented-control__item:first-child &,
		.segmented-control--wrapping .segmented-control__item:last-child & {
			box-shadow: inset 0 0 0 ($segmented-control-border-width-states - $segmented-control-border-width) $color-select-500;
		}
	}

	.segmented-control__item-input:disabled ~ & {
		opacity: $opacity-disabled;
		pointer-events: none;
	}

	.segmented-control.is-invalid & {
		border-color: $color-error;
		background-color: $color-error-10;
		box-shadow: inset 0 0 0 1px $color-error;
	}
}
